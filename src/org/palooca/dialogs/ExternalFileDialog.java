/*
 * ExternalFileDialog.java
 *
 * Palo Open Office Calc AddIn
 * Copyright (C) 2008 PalOOCa Team,  Tensegrity Software GmbH, 2009

 * The software is licensed under an Open-Source License (GPL).
 * If you want to redistribute the software you must observe the regulations of
 * the GPL . If you want to redistribute the software without the
 * restrictions of the GPL, you have to contact Tensegrity Software GmbH
 * (Tensegrity) for written consent to do so.
 * Tensegrity may offer commercial licenses for redistribution (Dual Licensing)
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Created on 28/05/2010, 10:41:04 AM
 *
 */

package org.palooca.dialogs;

import com.sun.star.sheet.XCellRangeFormula;
import org.palooca.dataimport.ExternalDataHandler;
import com.sun.star.sheet.XSpreadsheet;
import com.sun.star.table.XCellRange;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.LineNumberReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.RandomAccessFile;
import java.util.regex.Pattern;
import org.palooca.PalOOCaManager;
import org.palooca.dataimport.ImportResult;


/**
 * Handles the import of files and the settings dialog
 *
 * @author Pieter van der Merwe
 */
public class ExternalFileDialog extends javax.swing.JDialog
    implements ExternalDataHandler
{

    private XComponentContext context;
    private PalOOCaManager manager;
    private int modalResult = JOptionPane.CANCEL_OPTION;
    private BufferedReader bufFileReader;
    private FileReader fileReader;
    private File importFile;
    private int currentEntryNum = 0;
    private int totalEntryNum = 0;
    private XSpreadsheet importSheet = null;


    /** Creates new form ExternalFileDialog */
    public ExternalFileDialog(java.awt.Frame parent, boolean modal, XComponentContext context) {
        super(parent, modal);
        initComponents();

        this.context = context;
        this.manager = PalOOCaManager.getInstance(context);

        rbgDelimiter.add(rbtComma);
        rbgDelimiter.add(rbtSemicolon);
        rbgDelimiter.add(rbtSpace);
        rbgDelimiter.add(rbtTab);
        rbgDelimiter.add(rbtUserDefined);

        txtFilePath.setText(manager.getImportFilePath());

        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgDelimiter = new javax.swing.ButtonGroup();
        txtFilePath = new javax.swing.JTextField();
        lblFilePath = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        rbtTab = new javax.swing.JRadioButton();
        rbtComma = new javax.swing.JRadioButton();
        rbtSemicolon = new javax.swing.JRadioButton();
        rbtSpace = new javax.swing.JRadioButton();
        rbtUserDefined = new javax.swing.JRadioButton();
        txtUserDefined = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDecimalPoint = new javax.swing.JTextField();
        chbShipHeader = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs"); // NOI18N
        setTitle(bundle.getString("ExternalFileDialogTitle")); // NOI18N
        setIconImage(null);
        setIconImages(null);

        txtFilePath.setName("txtFilePath"); // NOI18N

        lblFilePath.setText(bundle.getString("FilePathLabel")); // NOI18N
        lblFilePath.setName("lblFilePath"); // NOI18N

        btnBrowse.setText(bundle.getString("Browse")); // NOI18N
        btnBrowse.setName("btnBrowse"); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnNext.setText(bundle.getString("Next")); // NOI18N
        btnNext.setName("btnNext"); // NOI18N
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnCancel.setText(bundle.getString("Cancel")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("DelimiterLabel")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        rbtTab.setSelected(true);
        rbtTab.setText(bundle.getString("Tab")); // NOI18N
        rbtTab.setActionCommand("\\t");
        rbtTab.setName("rbtTab"); // NOI18N

        rbtComma.setText(bundle.getString("Comma")); // NOI18N
        rbtComma.setActionCommand(",");
        rbtComma.setName("rbtComma"); // NOI18N

        rbtSemicolon.setText(bundle.getString("Semicolon")); // NOI18N
        rbtSemicolon.setActionCommand(";");
        rbtSemicolon.setName("rbtSemicolon"); // NOI18N

        rbtSpace.setText(bundle.getString("Space")); // NOI18N
        rbtSpace.setActionCommand(" ");
        rbtSpace.setName("rbtSpace"); // NOI18N

        rbtUserDefined.setText(bundle.getString("UserDefined")); // NOI18N
        rbtUserDefined.setActionCommand("USER");
        rbtUserDefined.setName("rbtUserDefined"); // NOI18N
        rbtUserDefined.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbtUserDefinedStateChanged(evt);
            }
        });

        txtUserDefined.setEditable(false);
        txtUserDefined.setName("txtUserDefined"); // NOI18N

        jLabel2.setText(bundle.getString("DecimalPointLabel")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        txtDecimalPoint.setText(".");
        txtDecimalPoint.setName("txtDecimalPoint"); // NOI18N

        chbShipHeader.setText(bundle.getString("SkipHeader")); // NOI18N
        chbShipHeader.setName("chbShipHeader"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(rbtComma)
                                    .add(rbtTab))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 125, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(rbtSpace)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(chbShipHeader)
                                            .add(rbtUserDefined))
                                        .add(18, 18, 18)
                                        .add(txtUserDefined, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(5, 5, 5))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(rbtSemicolon)
                                    .add(jLabel1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 299, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(lblFilePath)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtFilePath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                                .add(txtDecimalPoint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(261, 261, 261)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnBrowse))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btnNext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblFilePath)
                    .add(txtFilePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnBrowse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(rbtSpace)
                    .add(rbtTab))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rbtComma)
                    .add(rbtUserDefined)
                    .add(txtUserDefined, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rbtSemicolon)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(txtDecimalPoint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chbShipHeader))
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnCancel)
                    .add(btnNext))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser fileChooser = new JFileChooser(txtFilePath.getText());
        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION)
            txtFilePath.setText(fileChooser.getSelectedFile().getPath());
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.modalResult = JOptionPane.CANCEL_OPTION;
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void rbtUserDefinedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbtUserDefinedStateChanged
        txtUserDefined.setEditable(rbtUserDefined.isSelected());
    }//GEN-LAST:event_rbtUserDefinedStateChanged

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
       manager.setImportFilePath(txtFilePath.getText());
        this.modalResult = JOptionPane.OK_OPTION;
        this.dispose();
    }//GEN-LAST:event_btnNextActionPerformed

    public int getModalResult() {
        return modalResult;
    }

    public String getDelimiter(){
        if (rbgDelimiter.getSelection().getActionCommand().equals("USER")){
            // To allow for regex expressions to be passed if you wanted to
            // In future would put a indicator on the screen
            if (txtUserDefined.getText().startsWith("R:"))
                return txtUserDefined.getText().substring(2);
            else return Pattern.quote(txtUserDefined.getText());
        }
        else return rbgDelimiter.getSelection().getActionCommand();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JCheckBox chbShipHeader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblFilePath;
    private javax.swing.ButtonGroup rbgDelimiter;
    private javax.swing.JRadioButton rbtComma;
    private javax.swing.JRadioButton rbtSemicolon;
    private javax.swing.JRadioButton rbtSpace;
    private javax.swing.JRadioButton rbtTab;
    private javax.swing.JRadioButton rbtUserDefined;
    private javax.swing.JTextField txtDecimalPoint;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtUserDefined;
    // End of variables declaration//GEN-END:variables

    /**
     * Opens the file to be read and sets up the counters
     */
    @Override
    public void beginImport() {
        RandomAccessFile randFileReader = null;
        LineNumberReader lineReader = null;
        currentEntryNum = 0;

        try {
            importFile = new File(txtFilePath.getText());
            fileReader = new FileReader(importFile);

            bufFileReader = new BufferedReader(new FileReader(importFile));

            randFileReader = new RandomAccessFile(importFile, "r");
            lineReader = new LineNumberReader(fileReader);

            lineReader.skip(randFileReader.length());
            totalEntryNum = lineReader.getLineNumber();

            if (chbShipHeader.isSelected())
                totalEntryNum = totalEntryNum - 1;

            ImportResult.setFileDelimiter(this.getDelimiter());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs").getString("FileLoadError")
                            + ex.getMessage(),
                    java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs").getString("Error"),
                    JOptionPane.ERROR_MESSAGE);
        }
        finally{
            try{
                if (randFileReader != null)
                    randFileReader.close();

                if (lineReader != null)
                    lineReader.close();
            }
            catch (Exception ex) {}
        }
    }

    /**
     * Imports one line from file and puts it on the first line
     */
    @Override
    public void doEntryImport() {
        // The first time an entry is loaded, the sheet to set the values on are locked
        // so it doesn't change as you click on difference cheets during the import
        if (importSheet == null)
            importSheet = manager.getActiveSpreadSheet();

        char decimalChar = txtDecimalPoint.getText().toCharArray()[0];
        char ooChar = manager.getDecimalSeparator().toCharArray()[0];

        try{
            if (currentEntryNum == 0 && chbShipHeader.isSelected())
                 bufFileReader.readLine();

            String line = bufFileReader.readLine();
            String [] entries = line.split(ImportResult.getFileDelimiter());

            XCellRange cellRange = importSheet.getCellRangeByPosition(0, 0, entries.length - 1, 0);
            XCellRangeFormula cellRangeFormula = (XCellRangeFormula) UnoRuntime.queryInterface(XCellRangeFormula.class, cellRange);

            String [][] cellFormula = new String[1][entries.length];
            for (int col = 0; col < entries.length; col++){
                String entry = entries[col];
                boolean confirmedString = false;

                char firstChar = ' ';
                char lastChar = ' ';

                if (entry.length() > 1){
                    firstChar = entry.charAt(0);
                    lastChar = entry.charAt(entry.length() - 1);
                }

                if (firstChar == '\'' || firstChar == '\"')
                    confirmedString = true;

                // Check if the string is enclosed in ' or "
                if ((firstChar == '\'' && lastChar == '\'')
                    || (firstChar == '"' && lastChar == '"'))
                    entry = entry.substring(1, entry.length() - 1);

                // If the decimal character is different than the default oo value
                // then check if the field is a number and replace the decimal character
                if (! confirmedString
                        && decimalChar != ooChar
                        && isNumber(entry,decimalChar)
                        && entry.indexOf(decimalChar) > 0)
                    entry = entry.replace(decimalChar, ooChar);

                cellFormula[0][col] = entry;
            }

            cellRangeFormula.setFormulaArray(cellFormula);

            currentEntryNum = currentEntryNum + 1;

        }
        catch(Exception ex){
            totalEntryNum = 0;
            currentEntryNum = 0;
        }
    }

    private boolean isNumber(String s, char decimal){
        boolean isNum = true;
        for (char c: s.toCharArray()){
            if (c == decimal)
                continue;

            if (! Character.isDigit(c))
                return false;
        }
        return isNum;
    }

    /**
     * Cleans up any resources used.
     * Closes open file readers
     */
    @Override
    public void endImport() {
            try{
                if (bufFileReader != null)
                    bufFileReader.close();
                if (fileReader != null)
                    fileReader.close();
            }
            catch (Exception ex){}
    }

    @Override
    public boolean hasMoreEntries() {
        return totalEntryNum > currentEntryNum;
    }

    @Override
    public int getTotalEntryNum() {
        return totalEntryNum;
    }

    @Override
    public int getCurrentEntryNum() {
        return currentEntryNum;
    }
}

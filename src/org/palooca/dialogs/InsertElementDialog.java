/*
 * Palo Open Office Calc AddIn
 * Copyright (C) 2008 PalOOCa Team,  Tensegrity Software GmbH, 2009

 * The software is licensed under an Open-Source License (GPL).
 * If you want to redistribute the software you must observe the regulations of
 * the GPL . If you want to redistribute the software without the
 * restrictions of the GPL, you have to contact Tensegrity Software GmbH
 * (Tensegrity) for written consent to do so.
 * Tensegrity may offer commercial licenses for redistribution (Dual Licensing)
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Created on 15.06.2009, 13:01:46
 */
package org.palooca.dialogs;

import org.palooca.dialogs.nodes.ElementTreeNode;
import com.sun.star.sheet.XCellRangeAddressable;
import com.sun.star.sheet.XCellRangeFormula;
import com.sun.star.table.CellRangeAddress;
import com.sun.star.table.XCellRange;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.util.Arrays;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import com.jedox.palojlib.interfaces.IAttribute;
import com.jedox.palojlib.interfaces.ICube;
import com.jedox.palojlib.interfaces.IDatabase;
import com.jedox.palojlib.interfaces.IDimension;
import com.jedox.palojlib.interfaces.IElement;
import org.palooca.PalOOCaManager;
import org.palooca.network.ConnectionInfo;

/**
 *
 * @author MichaelRaue
 */
public class InsertElementDialog extends PaloDialogUtilities
        implements TreeExpansionListener {

    private XCellRange selectedRange;
    private DefaultListModel dimensionModel = new DefaultListModel();
    private ButtonGroup btnGroup = new ButtonGroup();

    /** Creates new form InsertElementDialog */
    public InsertElementDialog(java.awt.Frame parent, boolean modal, XComponentContext context,
            XCellRange selectedRange) {
        super(parent, modal, context);

        this.selectedRange = selectedRange;

        initComponents();

//        setIconImage(new ImageIcon(InsertElementDialog.class.getResource("/images/InsertElements.PNG")).getImage());

        comboBoxDatabase.setRenderer(new DatabaseListCellRenderer());
        listDimensions.setCellRenderer(new DimensionListCellRenderer());
        comboBoxDimensions.setRenderer(new DimensionListCellRenderer());
        treeElements.addTreeExpansionListener(this);
        treeElements.setCellRenderer(new TreeElementRenderer(attribute));
        jListElements.setCellRenderer(new ElementListRenderer(attribute));
        
        buildDatabaseList();

        setDatabase(connectionHandler.getLastConnectionInfo(), connectionHandler.getLastDatabase(), comboBoxCube);
        if (database != null)
            selectDatabaseCombo(connectionHandler.getLastConnectionInfo(), database, comboBoxDatabase);

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);

        cmbAliasFormat.removeAllItems();
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatAlias"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatName"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatName-Alias"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatAlias-Name"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatNameAliasP"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatAliasNameP"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatNameAlias"));
        cmbAliasFormat.addItem(resourceBundle.getString("AliasFormatAliasName"));
        cmbAliasFormat.setSelectedIndex(0);

        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBoxDatabase = new javax.swing.JComboBox();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelElements = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxDimensions = new javax.swing.JComboBox();
        jButtonExpandAll = new javax.swing.JButton();
        jButtonCollapseAll = new javax.swing.JButton();
        jButtonCollapse = new javax.swing.JButton();
        jButtonExpand = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonSelectAll = new javax.swing.JButton();
        jButtonSelect1 = new javax.swing.JButton();
        jButtonSelect2 = new javax.swing.JButton();
        jButtonSelect3 = new javax.swing.JButton();
        jButtonSelect4 = new javax.swing.JButton();
        jButtonSelect5 = new javax.swing.JButton();
        jButtonSelectB = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonSelectChildren = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeElements = new javax.swing.JTree();
        jButtonMoveRight = new javax.swing.JButton();
        jButtonMoveLeft = new javax.swing.JButton();
        jButtonMoveUp = new javax.swing.JButton();
        jButtonMoveDown = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButtonSortUp = new javax.swing.JButton();
        jButtonSortDown = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListElements = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        cmbAlias = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbAliasFormat = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        btnInvertSelection = new javax.swing.JButton();
        jPanelMetaData = new javax.swing.JPanel();
        radioButtonInsertConnection = new javax.swing.JRadioButton();
        radioButtonInsertCubeName = new javax.swing.JRadioButton();
        lblCube = new javax.swing.JLabel();
        comboBoxCube = new javax.swing.JComboBox();
        btnDataCubes = new javax.swing.JToggleButton();
        btnAttributeCubes = new javax.swing.JToggleButton();
        btnUserCubes = new javax.swing.JToggleButton();
        radioButtonInsertDimensionName = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listDimensions = new javax.swing.JList();
        btnPasteHorizontally = new javax.swing.JButton();
        btnPasteVertically = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs"); // NOI18N
        setTitle(bundle.getString("Insert_Element_Caption")); // NOI18N
        setAlwaysOnTop(true);

        jLabel1.setText(bundle.getString("SelectServerDatabase")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        comboBoxDatabase.setModel(databaseModel);
        comboBoxDatabase.setName("comboBoxDatabase"); // NOI18N
        comboBoxDatabase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDatabaseChange(evt);
            }
        });

        jPanelElements.setName("jPanelElements"); // NOI18N
        jPanelElements.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText(bundle.getString("SelectDimension")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanelElements.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        comboBoxDimensions.setModel(dimensionComboModel);
        comboBoxDimensions.setName("comboBoxDimensions"); // NOI18N
        comboBoxDimensions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDimensionChanged(evt);
            }
        });
        jPanelElements.add(comboBoxDimensions, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 160, -1));

        jButtonExpandAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/expandAll.png"))); // NOI18N
        jButtonExpandAll.setText(bundle.getString("ExpandAll")); // NOI18N
        jButtonExpandAll.setName("jButtonExpandAll"); // NOI18N
        jButtonExpandAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpandAllActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonExpandAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 25, -1));

        jButtonCollapseAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/collapseAll.png"))); // NOI18N
        jButtonCollapseAll.setText(bundle.getString("CollapseAll")); // NOI18N
        jButtonCollapseAll.setName("jButtonCollapseAll"); // NOI18N
        jButtonCollapseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCollapseAllActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonCollapseAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 25, -1));

        jButtonCollapse.setText(bundle.getString("Collapse")); // NOI18N
        jButtonCollapse.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonCollapse.setName("jButtonCollapse"); // NOI18N
        jButtonCollapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCollapseActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonCollapse, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 25, -1));

        jButtonExpand.setText(bundle.getString("Expand")); // NOI18N
        jButtonExpand.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonExpand.setName("jButtonExpand"); // NOI18N
        jButtonExpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpandActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonExpand, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 25, -1));

        jLabel3.setText(bundle.getString("Hierarchy")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanelElements.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jButtonSelectAll.setText(bundle.getString("SelectAll")); // NOI18N
        jButtonSelectAll.setName("jButtonSelectAll"); // NOI18N
        jButtonSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectAllActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelectAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 390, 120, -1));

        jButtonSelect1.setText("1"); // NOI18N
        jButtonSelect1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelect1.setName("jButtonSelect1"); // NOI18N
        jButtonSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelect1ActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelect1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 420, -1, -1));

        jButtonSelect2.setText("2"); // NOI18N
        jButtonSelect2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelect2.setName("jButtonSelect2"); // NOI18N
        jButtonSelect2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelect2ActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelect2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, -1, -1));

        jButtonSelect3.setText("3"); // NOI18N
        jButtonSelect3.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelect3.setName("jButtonSelect3"); // NOI18N
        jButtonSelect3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelect3ActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelect3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 420, -1, -1));

        jButtonSelect4.setText("4"); // NOI18N
        jButtonSelect4.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelect4.setName("jButtonSelect4"); // NOI18N
        jButtonSelect4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelect4ActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelect4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 420, -1, -1));

        jButtonSelect5.setText("5"); // NOI18N
        jButtonSelect5.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelect5.setName("jButtonSelect5"); // NOI18N
        jButtonSelect5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelect5ActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelect5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, -1, -1));

        jButtonSelectB.setText("B"); // NOI18N
        jButtonSelectB.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSelectB.setName("jButtonSelectB"); // NOI18N
        jButtonSelectB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectBActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelectB, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 420, -1, -1));

        jTextFieldSearch.setName("jTextFieldSearch"); // NOI18N
        jPanelElements.add(jTextFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 450, 120, -1));

        jButtonSearch.setText(bundle.getString("SearchSelect")); // NOI18N
        jButtonSearch.setMargin(new java.awt.Insets(2, 6, 2, 6));
        jButtonSearch.setName("jButtonSearch"); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 450, 140, -1));

        jButtonSelectChildren.setText(bundle.getString("SelectChildren")); // NOI18N
        jButtonSelectChildren.setMargin(new java.awt.Insets(2, 6, 2, 6));
        jButtonSelectChildren.setName("jButtonSelectChildren"); // NOI18N
        jButtonSelectChildren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectChildrenActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSelectChildren, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 390, 140, -1));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        treeElements.setModel(elementTreeModel);
        treeElements.setToolTipText(resourceBundle.getString("Right_click_tip")); // NOI18N
        treeElements.setName("treeElements"); // NOI18N
        treeElements.setRootVisible(false);
        treeElements.setShowsRootHandles(true);
        treeElements.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeElementsMouseClicked(evt);
            }
        });
        treeElements.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeElementsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeElements);

        jPanelElements.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 200, 330));

        jButtonMoveRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MoveNext.png"))); // NOI18N
        jButtonMoveRight.setName("jButtonMoveRight"); // NOI18N
        jButtonMoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveRightActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonMoveRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 25, -1));

        jButtonMoveLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MovePrevious.png"))); // NOI18N
        jButtonMoveLeft.setName("jButtonMoveLeft"); // NOI18N
        jButtonMoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveLeftActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonMoveLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 25, -1));

        jButtonMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MoveUp.png"))); // NOI18N
        jButtonMoveUp.setName("jButtonMoveUp"); // NOI18N
        jButtonMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveUpActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonMoveUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 25, -1));

        jButtonMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MoveDown.PNG"))); // NOI18N
        jButtonMoveDown.setName("jButtonMoveDown"); // NOI18N
        jButtonMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveDownActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonMoveDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 25, -1));

        jLabel4.setText(bundle.getString("PickList")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jPanelElements.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, -1, -1));

        jButtonSortUp.setText(bundle.getString("SortUp")); // NOI18N
        jButtonSortUp.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSortUp.setName("jButtonSortUp"); // NOI18N
        jButtonSortUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortUpActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSortUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 83, -1));

        jButtonSortDown.setText(bundle.getString("SortDown")); // NOI18N
        jButtonSortDown.setName("jButtonSortDown"); // NOI18N
        jButtonSortDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortDownActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonSortDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 90, -1));

        jButtonClear.setText(bundle.getString("Clear")); // NOI18N
        jButtonClear.setName("jButtonClear"); // NOI18N
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jPanelElements.add(jButtonClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 80, -1));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jListElements.setModel(elementModel);
        jListElements.setName("jListElements"); // NOI18N
        jListElements.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListElementslistElementsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListElements);

        jPanelElements.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 270, 280));

        jLabel5.setText(bundle.getString("UseAlias")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jPanelElements.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, -1));

        cmbAlias.setName("cmbAlias"); // NOI18N
        cmbAlias.setRenderer(new AttributeComboBoxRenderer());
        cmbAlias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAliasItemStateChanged(evt);
            }
        });
        jPanelElements.add(cmbAlias, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 120, -1));

        jLabel6.setText(bundle.getString("AliasFormat")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jPanelElements.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));

        cmbAliasFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAliasFormat.setName("cmbAliasFormat"); // NOI18N
        cmbAliasFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAliasFormatItemStateChanged(evt);
            }
        });
        jPanelElements.add(cmbAliasFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, 120, -1));

        jLabel7.setText(bundle.getString("ShiftTip")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jPanelElements.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 480, -1, -1));

        btnInvertSelection.setText(bundle.getString("InvertSelection")); // NOI18N
        btnInvertSelection.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnInvertSelection.setName("btnInvertSelection"); // NOI18N
        btnInvertSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertSelectionActionPerformed(evt);
            }
        });
        jPanelElements.add(btnInvertSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 420, 140, -1));

        jTabbedPane.addTab(bundle.getString("Elements"), jPanelElements); // NOI18N

        jPanelMetaData.setName("jPanelMetaData"); // NOI18N

        btnGroup.add(radioButtonInsertConnection);
        radioButtonInsertConnection.setText(bundle.getString("InsertConnection")); // NOI18N
        radioButtonInsertConnection.setName("radioButtonInsertConnection"); // NOI18N

        btnGroup.add(radioButtonInsertCubeName);
        radioButtonInsertCubeName.setText(bundle.getString("InsertCubeName")); // NOI18N
        radioButtonInsertCubeName.setName("radioButtonInsertCubeName"); // NOI18N

        lblCube.setText(resourceBundle.getString("Cube")); // NOI18N
        lblCube.setName("lblCube"); // NOI18N

        comboBoxCube.setModel(cubeModel);
        comboBoxCube.setName("comboBoxCube"); // NOI18N
        comboBoxCube.setRenderer(new CubeComboBoxRenderer());

        btnDataCubes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cube.png"))); // NOI18N
        btnDataCubes.setSelected(true);
        btnDataCubes.setToolTipText(resourceBundle.getString("DataCubes")); // NOI18N
        btnDataCubes.setEnabled(false);
        btnDataCubes.setName("btnDataCubes"); // NOI18N
        btnDataCubes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataCubesActionPerformed(evt);
            }
        });

        btnAttributeCubes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/attribute.png"))); // NOI18N
        btnAttributeCubes.setToolTipText(resourceBundle.getString("AttributeCubes")); // NOI18N
        btnAttributeCubes.setEnabled(false);
        btnAttributeCubes.setName("btnAttributeCubes"); // NOI18N
        btnAttributeCubes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttributeCubesActionPerformed(evt);
            }
        });

        btnUserCubes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user.png"))); // NOI18N
        btnUserCubes.setToolTipText(resourceBundle.getString("UserCubes")); // NOI18N
        btnUserCubes.setEnabled(false);
        btnUserCubes.setName("btnUserCubes"); // NOI18N
        btnUserCubes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserCubesActionPerformed(evt);
            }
        });

        btnGroup.add(radioButtonInsertDimensionName);
        radioButtonInsertDimensionName.setText(bundle.getString("InsertDimensionName")); // NOI18N
        radioButtonInsertDimensionName.setName("radioButtonInsertDimensionName"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        listDimensions.setModel(dimensionModel);
        listDimensions.setName("listDimensions"); // NOI18N
        jScrollPane3.setViewportView(listDimensions);

        org.jdesktop.layout.GroupLayout jPanelMetaDataLayout = new org.jdesktop.layout.GroupLayout(jPanelMetaData);
        jPanelMetaData.setLayout(jPanelMetaDataLayout);
        jPanelMetaDataLayout.setHorizontalGroup(
            jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelMetaDataLayout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(radioButtonInsertCubeName)
                    .add(radioButtonInsertConnection)
                    .add(jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, radioButtonInsertDimensionName)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelMetaDataLayout.createSequentialGroup()
                            .add(21, 21, 21)
                            .add(lblCube)
                            .add(38, 38, 38)
                            .add(comboBoxCube, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(18, 18, 18)
                            .add(btnDataCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(btnAttributeCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(btnUserCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelMetaDataLayout.createSequentialGroup()
                            .add(21, 21, 21)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 397, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanelMetaDataLayout.setVerticalGroup(
            jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelMetaDataLayout.createSequentialGroup()
                .add(jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelMetaDataLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(radioButtonInsertConnection)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(radioButtonInsertCubeName)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(comboBoxCube, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblCube))
                        .add(25, 25, 25)
                        .add(radioButtonInsertDimensionName))
                    .add(jPanelMetaDataLayout.createSequentialGroup()
                        .add(54, 54, 54)
                        .add(jPanelMetaDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnUserCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnAttributeCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnDataCubes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        jTabbedPane.addTab(bundle.getString("Metadata"), jPanelMetaData); // NOI18N

        btnPasteHorizontally.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hinsert.PNG"))); // NOI18N
        btnPasteHorizontally.setText(bundle.getString("PasteHorizontally")); // NOI18N
        btnPasteHorizontally.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnPasteHorizontally.setIconTextGap(5);
        btnPasteHorizontally.setName("btnPasteHorizontally"); // NOI18N
        btnPasteHorizontally.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteHorizontallyActionPerformed(evt);
            }
        });

        btnPasteVertically.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vinsert.PNG"))); // NOI18N
        btnPasteVertically.setText(bundle.getString("PasteVertically")); // NOI18N
        btnPasteVertically.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnPasteVertically.setIconTextGap(16);
        btnPasteVertically.setName("btnPasteVertically"); // NOI18N
        btnPasteVertically.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteVerticallyActionPerformed(evt);
            }
        });

        btnCancel.setText(bundle.getString("Cancel")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 557, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(btnCancel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnPasteVertically, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnPasteHorizontally, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(comboBoxDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(comboBoxDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 537, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(70, 70, 70)
                        .add(btnPasteHorizontally)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnPasteVertically)
                        .add(18, 18, 18)
                        .add(btnCancel)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExpandAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpandAllActionPerformed
        expandAll(treeElements, true);
}//GEN-LAST:event_jButtonExpandAllActionPerformed

    private void jButtonCollapseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCollapseAllActionPerformed
        expandAll(treeElements, false);
}//GEN-LAST:event_jButtonCollapseAllActionPerformed

    private void jButtonCollapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCollapseActionPerformed
        collapse(treeElements);
    }//GEN-LAST:event_jButtonCollapseActionPerformed

    private void jButtonExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpandActionPerformed
        expand(treeElements);
}//GEN-LAST:event_jButtonExpandActionPerformed

    private void jButtonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectAllActionPerformed
        treeElements.setSelectionInterval(0, treeElements.getRowCount());
}//GEN-LAST:event_jButtonSelectAllActionPerformed

    private void jButtonSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelect1ActionPerformed
        selectByLevel(1, ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) ? true : false);
}//GEN-LAST:event_jButtonSelect1ActionPerformed

    private void jButtonSelect2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelect2ActionPerformed
        selectByLevel(2, ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) ? true : false);
}//GEN-LAST:event_jButtonSelect2ActionPerformed

    private void jButtonSelect3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelect3ActionPerformed
        selectByLevel(3, ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) ? true : false);
}//GEN-LAST:event_jButtonSelect3ActionPerformed

    private void jButtonSelect4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelect4ActionPerformed
        selectByLevel(4, ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) ? true : false);
}//GEN-LAST:event_jButtonSelect4ActionPerformed

    private void jButtonSelect5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelect5ActionPerformed
        selectByLevel(5, ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0) ? true : false);
}//GEN-LAST:event_jButtonSelect5ActionPerformed

    private void jButtonSelectBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectBActionPerformed
        int cnt = treeElements.getRowCount();

        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) == 0) {
            treeElements.clearSelection();
        }

        int amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node.getChildCount() == 0) {
                amount++;
            }
        }

        TreePath[] paths = new TreePath[amount];
        amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node.getChildCount() == 0) {
                paths[amount] = path;
                amount++;
            }
        }
        treeElements.addSelectionPaths(paths);
    }//GEN-LAST:event_jButtonSelectBActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        String searchText = jTextFieldSearch.getText();

        if ((evt.getModifiers() & ActionEvent.SHIFT_MASK) == 0) {
            treeElements.clearSelection();
        }

        if (searchForNode(treeElements, searchText, attribute, rootNode, (evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0, false) == false) {
             JOptionPane.showMessageDialog(this,
                     java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs").getString("SearchNotFound"),
                     java.util.ResourceBundle.getBundle("org/palooca/dialogs/PalOOCaDialogs").getString("Information"), JOptionPane.INFORMATION_MESSAGE);
        }
}//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonSelectChildrenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectChildrenActionPerformed
        TreePath path[] = treeElements.getSelectionPaths();

        for (int i = 0; i < path.length; i++) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path[i].getLastPathComponent();
            TreePath[] paths = new TreePath[node.getChildCount()];
            for (int j = 0; j < node.getChildCount(); j++) {
                paths[j] = new TreePath(((DefaultMutableTreeNode) node.getChildAt(j)).getPath());
            }
            treeElements.addSelectionPaths(paths);
        }
}//GEN-LAST:event_jButtonSelectChildrenActionPerformed

    private void treeElementsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeElementsMouseClicked
        if (evt.getClickCount() == 2) {
// TODO            btnOKActionPerformed(null);
        }
}//GEN-LAST:event_treeElementsMouseClicked

    private void treeElementsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeElementsValueChanged
        TreePath[] paths = treeElements.getSelectionPaths();
// TODO        btnOK.setEnabled(paths != null && paths.length > 0);
        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_treeElementsValueChanged

    private void jButtonMoveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveRightActionPerformed
        int selRows[] = treeElements.getSelectionRows();

        if (selRows == null)
            return;
        
        treeElements.getModel();

        Arrays.sort(selRows);

        for (int i = 0; i < selRows.length; i++) {
            TreePath path = treeElements.getPathForRow(selRows[i]);
            ElementTreeNode node = (ElementTreeNode) path.getLastPathComponent();

            ListElement le = new ListElement(node, path);
            elementModel.addElement(le);
        }

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jButtonMoveRightActionPerformed

    private void jButtonMoveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveLeftActionPerformed
        int selRows[] = jListElements.getSelectedIndices();

        for (int i = selRows.length - 1; i >= 0; i--) {
            elementModel.remove(selRows[i]);
        }

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jButtonMoveLeftActionPerformed

    private void jButtonMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveUpActionPerformed
        int selRows[] = jListElements.getSelectedIndices();
        Object obj;

        for (int i = 0; i < selRows.length; i++) {
            if (selRows[i] > 0) {
                obj = elementModel.get(selRows[i]);
                elementModel.remove(selRows[i]);
                elementModel.insertElementAt(obj, selRows[i] - 1);
                jListElements.addSelectionInterval(selRows[i] - 1, selRows[i] - 1);
            }
        }

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jButtonMoveUpActionPerformed

    private void jButtonMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveDownActionPerformed
        int selRows[] = jListElements.getSelectedIndices();
        Object obj;

        for (int i = selRows.length - 1; i >= 0; i--) {
            obj = elementModel.get(selRows[i]);
            elementModel.remove(selRows[i]);
            elementModel.insertElementAt(obj, selRows[i] + 1);
            jListElements.addSelectionInterval(selRows[i] + 1, selRows[i] + 1);
        }

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jButtonMoveDownActionPerformed

    private void jButtonSortUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortUpActionPerformed
        sortList(true);
}//GEN-LAST:event_jButtonSortUpActionPerformed

    private void jButtonSortDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortDownActionPerformed
        sortList(false);
}//GEN-LAST:event_jButtonSortDownActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        elementModel.clear();
        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jButtonClearActionPerformed

    private void jListElementslistElementsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListElementslistElementsValueChanged
        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
}//GEN-LAST:event_jListElementslistElementsValueChanged

    private void btnDataCubesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataCubesActionPerformed
        buildCubeList(ICube.CubeType.CUBE_NORMAL, comboBoxCube);
}//GEN-LAST:event_btnDataCubesActionPerformed

    private void btnAttributeCubesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttributeCubesActionPerformed
        buildCubeList(ICube.CubeType.CUBE_ATTRIBUTE, comboBoxCube);
}//GEN-LAST:event_btnAttributeCubesActionPerformed

    private void btnUserCubesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserCubesActionPerformed
        buildCubeList(ICube.CubeType.CUBE_SYSTEM, comboBoxCube);
}//GEN-LAST:event_btnUserCubesActionPerformed

    private void comboDatabaseChange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDatabaseChange
        comboDatabaseChangeEvent(evt, comboBoxCube);
    }//GEN-LAST:event_comboDatabaseChange

    private void comboDimensionChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDimensionChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Object val  = evt.getItem();
            if (val instanceof IDimension) {
                IDimension dim = (IDimension) evt.getItem();
                attribute = null;

                cmbAlias.removeAllItems();
                cmbAlias.addItem(resourceBundle.getString("None"));

                IAttribute[]  attributes = dim.getAttributes();
              
                for (int i = 0; i < attributes.length; i++) {
                    if (attributes[i].getType().equals(IElement.ElementType.ELEMENT_STRING))
                        cmbAlias.addItem(attributes[i]);
                }

                cmbAlias.setSelectedIndex(0);
                cmbAliasFormat.setSelectedIndex(0);
                attribute = null;
                
                TreeElementRenderer treeRenderer = (TreeElementRenderer)treeElements.getCellRenderer();
                treeRenderer.setAttribute(attribute);
                treeRenderer.setAttributeFormat(-1);

                elementModel.removeAllElements();

                ElementListRenderer renderer = (ElementListRenderer)jListElements.getCellRenderer();
                renderer.setAttribute(attribute);
                renderer.setAttributeFormat(-1);

                buildElementList(dim, attribute);
            }
        }
}//GEN-LAST:event_comboDimensionChanged

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
        dispose();
}//GEN-LAST:event_btnCancelActionPerformed

    private void btnPasteHorizontallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteHorizontallyActionPerformed
        insertElements(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnPasteHorizontallyActionPerformed

    private void btnPasteVerticallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteVerticallyActionPerformed
        insertElements(false);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnPasteVerticallyActionPerformed

    private void cmbAliasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAliasItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (evt.getItem() instanceof String) {
                attribute = null;
            } else {
                attribute = (IAttribute)evt.getItem();
            }
            TreeElementRenderer treeRenderer = (TreeElementRenderer)treeElements.getCellRenderer();
            treeRenderer.setAttribute(attribute);

            int cnt = treeElements.getRowCount();
            treeElements.getModel();

            for (int i = 0; i < cnt; i++) {
                TreePath path = treeElements.getPathForRow(i);
                ElementTreeNode node = (ElementTreeNode) path.getLastPathComponent();
                elementTreeModel.nodeChanged(node);
            }

            treeElements.repaint();
            ElementListRenderer renderer = (ElementListRenderer)jListElements.getCellRenderer();
            renderer.setAttribute(attribute);
            jListElements.repaint();
        }
}//GEN-LAST:event_cmbAliasItemStateChanged

    private void cmbAliasFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAliasFormatItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int index = cmbAliasFormat.getSelectedIndex();
            TreeElementRenderer treeRenderer = (TreeElementRenderer)treeElements.getCellRenderer();
            treeRenderer.setAttribute(attribute);
            treeRenderer.setAttributeFormat(index);

            int cnt = treeElements.getRowCount();

            for (int i = 0; i < cnt; i++) {
                TreePath path = treeElements.getPathForRow(i);
                ElementTreeNode node = (ElementTreeNode) path.getLastPathComponent();
                elementTreeModel.nodeChanged(node);
            }

            treeElements.repaint();
            ElementListRenderer renderer = (ElementListRenderer)jListElements.getCellRenderer();
            renderer.setAttribute(attribute);
            renderer.setAttributeFormat(index);
            jListElements.repaint();
        }
    }//GEN-LAST:event_cmbAliasFormatItemStateChanged

    private void btnInvertSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertSelectionActionPerformed
        int cnt = treeElements.getRowCount();
        int amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            if (treeElements.isPathSelected(path)) {
            } else {
                amount++;
            }
        }

        TreePath[] paths = new TreePath[amount];
        amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            if (treeElements.isPathSelected(path)) {
            } else {
                paths[amount] = path;
                amount++;
            }
        }

        treeElements.clearSelection();
        treeElements.addSelectionPaths(paths);
}//GEN-LAST:event_btnInvertSelectionActionPerformed

    private void selectByLevel(int level, boolean addSelection) {
        int cnt = treeElements.getRowCount();

        if (addSelection == false)
            treeElements.clearSelection();

        int amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node.getLevel() == level) {
                amount++;
            }
        }

        TreePath[] paths = new TreePath[amount];
        amount = 0;

        for (int i = 0; i < cnt; i++) {
            TreePath path = treeElements.getPathForRow(i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node.getLevel() == level) {
                paths[amount] = path;
                amount++;
            }
        }

        treeElements.addSelectionPaths(paths);

        updateMoveButtons(treeElements, jListElements, jButtonMoveLeft, jButtonMoveRight, jButtonMoveUp, jButtonMoveDown);
    }

    public void treeExpanded(TreeExpansionEvent event) {
        if (treeElements.getSelectionModel().getSelectionMode() == TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION) {
            TreePath path = event.getPath();
            if (treeElements.isPathSelected(path)) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                TreePath[] paths = new TreePath[node.getChildCount()];
                for (int i = 0; i < node.getChildCount(); i++) {
                    paths[i] = new TreePath(((DefaultMutableTreeNode) node.getChildAt(i)).getPath());
                }
                treeElements.addSelectionPaths(paths);
            }
        }
    }

    public void treeCollapsed(TreeExpansionEvent event) {
    }

    @Override
    protected void setDatabase(ConnectionInfo connectionInfoNew, IDatabase databaseNew, JComboBox combBoxCube) {
        super.setDatabase(connectionInfoNew, databaseNew, comboBoxCube);

        if (connectionInfoNew != null && databaseNew != null) {
            btnDataCubes.setEnabled(true);
            btnAttributeCubes.setEnabled(true);
            btnUserCubes.setEnabled(true);

            dimensionComboModel.removeAllElements();
            dimensionModel.removeAllElements();

            IDimension[] dims = database.getDimensions();
            for (int i = 0; i < dims.length; i++) {
                if (dims[i].getType() == IDimension.DimensionType.DIMENSION_NORMAL) {
                    dimensionComboModel.addElement(dims[i]);
                    dimensionModel.addElement(dims[i]);
                }
            }

            if (dimensionComboModel.getSize() > 0) {
                listDimensions.setSelectedIndex(0);
                comboBoxDimensions.setSelectedIndex(0);
            }

            comboBoxDimensions.setEnabled(true);
            comboBoxCube.setEnabled(true);
        } else {
            comboBoxDimensions.setEnabled(false);
            comboBoxCube.setEnabled(false);
        }
    }

    @Override
    protected void resetDatabase()
    {
        super.resetDatabase();
        
        dimensionComboModel.removeAllElements();
        dimensionModel.removeAllElements();

        comboBoxDimensions.setEnabled(false);
        comboBoxCube.setEnabled(false);
    }

    private void insertElements(boolean horizontally) {
        TreePath[] paths = null;
        String[] data = null;

        if (jTabbedPane.getSelectedIndex() == 0)
        {
            if (jListElements.getModel().getSize() > 0) {
                ListElement el;
                paths = new TreePath[jListElements.getModel().getSize()];
                for (int i = 0; i < elementModel.getSize(); i++) {
                    el = (ListElement) elementModel.get(i);
                    paths[i] = el.path;
                }
            } else {
                paths = treeElements.getSelectionPaths();
            }
        } else {

            if (radioButtonInsertConnection.isSelected()) {
                data = new String[1];
                data[0] = connectionInfo.getName() + "/" + database.getName();
            } else if (radioButtonInsertCubeName.isSelected()) {
                ICube cube = (ICube)comboBoxCube.getSelectedItem();
                if (cube != null) {
                    data = new String[1];
                    data[0] = cube.getName();
                }
            } else if (radioButtonInsertDimensionName.isSelected()) {
                int[] sel = listDimensions.getSelectedIndices();
                if (sel != null) {
                    data = new String[sel.length];
                    for (int i = 0; i < sel.length; i++) {
                        data[i] = ((IDimension)dimensionModel.get(sel[i])).getName();
                    }
                }
            }
        }

        if (paths != null || data != null) {
            XCellRangeAddressable cellRangeAddressable = (XCellRangeAddressable) UnoRuntime.queryInterface(XCellRangeAddressable.class, selectedRange);
            CellRangeAddress address = cellRangeAddressable.getRangeAddress();

            XCellRange range;

            int size;
            int amount;

            if (paths != null)
                amount = paths.length;
            else
                amount = data.length;

            if (horizontally) {
                size = address.EndColumn - address.StartColumn + 1;
                if (size == 1 || (size < amount && JOptionPane.showConfirmDialog(this, resourceBundle.getString("Restrict_Elements_Text"), resourceBundle.getString("Restrict_Elements_Caption"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION)) {
                    range = PalOOCaManager.getInstance(context).getRange(address.StartColumn, address.StartRow, address.StartColumn + amount - 1, address.StartRow);
                    size = amount;
                } else {
                    range = selectedRange;
                    size = Math.min(size, amount);
                }
            } else {
                size = address.EndRow - address.StartRow + 1;
                if (size == 1 || (size < amount && JOptionPane.showConfirmDialog(this, resourceBundle.getString("Restrict_Elements_Text"), resourceBundle.getString("Restrict_Elements_Caption"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION)) {
                    range = PalOOCaManager.getInstance(context).getRange(address.StartColumn, address.StartRow, address.StartColumn, address.StartRow + amount - 1);
                    size = amount;
                } else {
                    range = selectedRange;
                    size = Math.min(size, amount);
                }
            }

            XCellRangeFormula rangeFormula = (XCellRangeFormula) UnoRuntime.queryInterface(XCellRangeFormula.class, range);
            String[][] formulas = rangeFormula.getFormulaArray();
//            if (paths.length > 1 || !cbVariableElement.isSelected()) {
            if (paths != null) {
                if (horizontally) {
                    for (int i = 0; i < size; i++)
                        formulas[0][i] = getLabel(((ElementTreeNode)paths[i].getLastPathComponent()).getDimension(),((ElementTreeNode)paths[i].getLastPathComponent()).getElement());
                } else {
                    for (int i = 0; i < size; i++)
                        formulas[i][0] = getLabel(((ElementTreeNode)paths[i].getLastPathComponent()).getDimension(),((ElementTreeNode)paths[i].getLastPathComponent()).getElement());
                }
            } else {
                if (radioButtonInsertConnection.isSelected()) {
                    formulas[0][0] = data[0];
                } else if (radioButtonInsertCubeName.isSelected()) {
                    formulas[0][0] = data[0];
                } else if (radioButtonInsertDimensionName.isSelected()) {
                    if (horizontally) {
                        for (int i = 0; i < size; i++)
                            formulas[0][i] = data[i];
                    } else {
                        for (int i = 0; i < size; i++)
                            formulas[i][0] = data[i];
                    }
                }

            }
//            } else {
//                FunctionToken function = new FunctionToken("org.palooca.PalOOCa.PALO_ENAME");
//                function.add(new ArgumentToken(function, new OperandToken(OperandType.Text, txtDatabase.getText())));
//                function.add(new ArgumentToken(function, new OperandToken(OperandType.Text, ((Dimension)comboBoxDimensions.getSelectedItem()).getName())));
//                function.add(new ArgumentToken(function, new OperandToken(OperandType.Text, ((ElementTreeNode)paths[0].getLastPathComponent()).getElement().getName())));
//                function.add(new ArgumentToken(function, new OperandToken(OperandType.Number, "1")));
//                formulas[0][0] = function.getFormula(true);
//            }
            rangeFormula.setFormulaArray(formulas);
        }
    }


    private String getLabel(IDimension dimension, IElement element) {
        String label;
        int attributeFormat = cmbAliasFormat.getSelectedIndex();

        if (attribute == null) {
            label = element.getName();
        } else {
            IElement attributedElement = dimension.getElementByName(element.getName(), true);
            String  attrtext = attributedElement.getAttributeValue(attribute.getName()).toString();
            if (attrtext.length() == 0)
                attrtext = element.getName();
            label = "";
            switch (attributeFormat) {
                case 1:             // AliasFormatName=Elementname
                    label = element.getName();
                    break;
                case 2:             // AliasFormatName-Alias=Elementname - Alias
                    label = element.getName() + " - " + attrtext;
                    break;
                case 3:             // AliasFormatAlias-Name=Alias - Elementname
                    label = attrtext +  " - " + element.getName();
                    break;
                case 4:             // AliasFormatNameAliasP=Elementname (Alias)
                    label = element.getName() + " (" + attrtext + ")";
                    break;
                case 5:             // AliasFormatAliasNameP=Alias (Elementname)
                    label = attrtext + " (" + element.getName() + ")";
                    break;
                case 6:             // AliasFormatNameAlias=Elementname Alias
                    label = element.getName() + " " + attrtext;
                    break;
                case 7:             // AliasFormatAliasName=Alias Elementname
                    label = attrtext + " " + element.getName();
                    break;
                case 0:             // AliasFormatAlias=Alias
                default:
                    label = attrtext;
                    break;
            }
        }

        return label;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAttributeCubes;
    private javax.swing.JButton btnCancel;
    private javax.swing.JToggleButton btnDataCubes;
    private javax.swing.JButton btnInvertSelection;
    private javax.swing.JButton btnPasteHorizontally;
    private javax.swing.JButton btnPasteVertically;
    private javax.swing.JToggleButton btnUserCubes;
    private javax.swing.JComboBox cmbAlias;
    private javax.swing.JComboBox cmbAliasFormat;
    private javax.swing.JComboBox comboBoxCube;
    private javax.swing.JComboBox comboBoxDatabase;
    private javax.swing.JComboBox comboBoxDimensions;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonCollapse;
    private javax.swing.JButton jButtonCollapseAll;
    private javax.swing.JButton jButtonExpand;
    private javax.swing.JButton jButtonExpandAll;
    private javax.swing.JButton jButtonMoveDown;
    private javax.swing.JButton jButtonMoveLeft;
    private javax.swing.JButton jButtonMoveRight;
    private javax.swing.JButton jButtonMoveUp;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSelect1;
    private javax.swing.JButton jButtonSelect2;
    private javax.swing.JButton jButtonSelect3;
    private javax.swing.JButton jButtonSelect4;
    private javax.swing.JButton jButtonSelect5;
    private javax.swing.JButton jButtonSelectAll;
    private javax.swing.JButton jButtonSelectB;
    private javax.swing.JButton jButtonSelectChildren;
    private javax.swing.JButton jButtonSortDown;
    private javax.swing.JButton jButtonSortUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jListElements;
    private javax.swing.JPanel jPanelElements;
    private javax.swing.JPanel jPanelMetaData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JLabel lblCube;
    private javax.swing.JList listDimensions;
    private javax.swing.JRadioButton radioButtonInsertConnection;
    private javax.swing.JRadioButton radioButtonInsertCubeName;
    private javax.swing.JRadioButton radioButtonInsertDimensionName;
    private javax.swing.JTree treeElements;
    // End of variables declaration//GEN-END:variables
}
